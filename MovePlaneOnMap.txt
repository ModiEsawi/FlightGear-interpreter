using System;
using System.Text;
using System.Windows.Input;
using Microsoft.Maps.MapControl.WPF;
using System.Net.Sockets;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Threading;

namespace BingMap
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    /// 

    public partial class MainWindow : INotifyPropertyChanged
    {
        
        private delegate void EmptyDelegate();
        public event PropertyChangedEventHandler PropertyChanged;

        private Location location;
        public Location Location
        {
            get { return location; }
            set
            {
                location = value;
                OnPropertyChanged("Location");
            }
        }
        // Create the OnPropertyChanged method to raise the event
        // The calling member's name will be used as the parameter.
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        public MainWindow()
        {
            DataContext = this;
            InitializeComponent();
            
        }
        
        public void ConnectPlane()
        {
            try
            {
                // Creating a TcpClient.
                
                double looper = 0.01;
                Int32 port = 5402;
                string server = "127.0.0.1";
                TcpClient client = new TcpClient(server, port);
                NetworkStream stream = client.GetStream();
                int stop = 1;
               
                // Takes the plane 10000 steps to the right starting from 0,0 coordinates , will start when the pin in double clicked!

                while (stop < 10000)
                {
                    // commands for *paul's* python simulator

                    string getLatitude = "get /position/latitude-deg\n", getLongtitude = "get /position/longitude-deg\n";

                    // Translate the passed message into ASCII and store it as a Byte array.
                    Byte[] latData = Encoding.ASCII.GetBytes(getLatitude);
                    Byte[] longData = Encoding.ASCII.GetBytes(getLongtitude);


                    double planeIconNewLat = Convert.ToDouble(SendAndRecive(stream, latData));
                    double planeIconNewLong = Convert.ToDouble(SendAndRecive(stream, longData));
                    
                    Location = new Location(planeIconNewLat, planeIconNewLong+ looper);
                   
                    RefreshMap();
                    looper += 0.4;
                    stop++;

                    // so we can see the pin move
                    Thread.Sleep(500); //  1/2 a second
                }

                // Close everything.
              stream.Close();
              client.Close();
            }
            catch (ArgumentNullException e)
            {
                Console.WriteLine("ArgumentNullException: {0}", e);
            }
            catch (SocketException e)
            {
                Console.WriteLine("SocketException: {0}", e);
            }

            Console.WriteLine("\n Press Enter to continue...");
            Console.Read();
        }
        protected void RefreshMap()
        {
            Dispatcher.CurrentDispatcher.Invoke(DispatcherPriority.Background,new EmptyDelegate(delegate{ }));
        }
        
        public string SendAndRecive(NetworkStream stream, Byte[] data)
        {
            // Send the message to the connected TcpServer. 
            stream.Write(data, 0, data.Length);

            // Receive the TcpServer.response.

            // Buffer to store the response bytes.
            data = new Byte[256];

            // String to store the response ASCII representation.
            String responseData = String.Empty;

            // Read the first batch of the TcpServer response bytes.
            Int32 bytes = stream.Read(data, 0, data.Length);

            return Encoding.ASCII.GetString(data, 0, bytes);

            
        }
      private void PinClicked(object sender, MouseButtonEventArgs e)
        {
            ConnectPlane();
            
        }
        
    }
}
